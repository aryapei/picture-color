{"version":3,"sources":["img/line.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","presetColors","App","canvas","React","createRef","state","color","data","x","y","radius","drawCircle","bind","eraseCircle","fillCanvasByImg","setData","setColor","this","setState","hex","img","require","ctx","current","getContext","myImgObj","Image","src","onload","drawImage","event","rect","getBoundingClientRect","newItem","clientX","left","clientY","top","push","item","i","isNaN","cx","cy","r","fill","onDoubleClick","key","splice","className","ref","width","height","onClick","xmlns","version","map","onChangeComplete","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b9a84c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/line.0fa4b773.jpg\";","import React from 'react';\nimport './App.css';\nimport { SketchPicker } from 'react-color';\n\n// 调色板下方的自定义色块\nconst presetColors = [\n\"#2F4F4F\", \"#708090\", \"#778899\", \"#696969\", \"#A9A9A9\", \"#D3D3D3\", \"#DCDCDC\", \"#B0C4DE\", \"#00008B\", \"#191970\", \n\"#483D8B\", \"#4B0082\", \"#0000CD\", \"#7B68EE\", \"#4169E1\", \"#6495ED\", \"#008BBB\", \"#4682B4\", \"#1E90FF\", \"#00BFFF\",\n\"#87CEFA\", \"#87CEEB\", \"#ADD8E6\", \"#00FFFF\", \"#5F9EA0\", \"#20B2AA\", \"#66CDAA\", \"#00CED1\", \"#48D1CC\", \"#40E0D0\",\n\"#B0E0E6\", \"#AFEEEE\", \"#6B8E23\", \"#556B2F\", \"#006400\", \"#228B22\", \"#2E8B57\", \"#3CB371\", \"#32CD32\", \"#9ACD32\",\n\"#7FFFD4\", \"#00FA9A\", \"#00FF7F\", \"#7CFC00\", \"#7FFF00\", \"#ADFF2F\", \"#90EE90\", \"#98FB98\", \"#8B008B\", \"#6A5ACD\",\n\"#8A2BE2\", \"#9400D3\", \"#9932CC\", \"#BA55D3\", \"#9370DB\", \"#8FBC8F\", \"#8B0000\", \"#8B4513\", \"#A52A2A\", \"#B22222\"\n]\n\nclass App extends React.Component {\n  constructor(){\n      super();\n      this.canvas = React.createRef();\n      this.state = {\n        color: \"pink\", // 当前选中的颜色\n        data: [        // data-item: {x: , y: , color: , radius: }\n          { x: 325, y: 306, color: \"pink\", radius: 10}, //随便画两个点\n          { x: 163, y: 78, color: \"cyan\", radius: 10}\n        ]       \n      };\n      this.drawCircle = this.drawCircle.bind(this);\n      this.eraseCircle = this.eraseCircle.bind(this);\n      this.fillCanvasByImg = this.fillCanvasByImg.bind(this);\n      this.setData = this.setData.bind(this);\n      this.setColor = this.setColor.bind(this);\n  }\n\n  setColor(color){\n    this.setState({\n      color: color.hex\n    })\n  }\n\n  // 在组件挂载后（插入 DOM 树中）立即调用，用来初始化页面\n  componentDidMount() {\n    // 渲染线图\n    var img = require(\"./img/line.jpg\")\n    this.fillCanvasByImg(img)\n  }\n\n  fillCanvasByImg(img) {\n    const ctx = this.canvas.current.getContext('2d');\n    var myImgObj = new Image();\n    myImgObj.src = img;\n    myImgObj.onload = function(){\n      ctx.drawImage(myImgObj,0,0);\n    }\n  }\n\n  setData(event){\n    var canvas = this.canvas.current;\n    var rect = canvas.getBoundingClientRect();\n    var x = (event.clientX - rect.left);\n    var y = (event.clientY - rect.top);\n\n    var newItem = { x: x, y: y, color: this.state.color, radius: 10}\n    this.state.data.push(newItem)\n    let data = this.state.data;\n    this.setState({\n      data: data\n    })\n  }\n\n  // 单击画布时触发，在当前位置画一个圆形色块\n  drawCircle(item, i){\n    if(isNaN(item.x)) return;\n    return (\n      <circle cx={item.x} cy={item.y} r={item.radius} fill={item.color} onDoubleClick={this.eraseCircle.bind(this, i)} key={i}/>\n    )\n  }\n\n  // 双击圆形色块时触发，擦除该圆形色块\n  eraseCircle(i){\n    this.state.data.splice(i,1);\n    let data = this.state.data;\n    this.setData({\n      data: data\n    })\n  }\n\n  componentWillReceiveProps(){}\n\n  render() {\n    return (\n      <div className=\"App\">\n          <div className=\"img-container\">\n              <div className=\"under-layer\">\n                <canvas ref={this.canvas} width=\"1000\" height=\"1000\" onClick={this.setData}>\n                  您的浏览器不支持canvas，请更换浏览器.\n                </canvas>\n              </div>\n              <div className=\"upper-layer\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n                  {this.state.data.map((item, i) => {\n                      return (this.drawCircle(item, i))\n                  })}\n                </svg>\n              </div>\n          </div>\n          <div className=\"color-container\">\n              <SketchPicker \n                width=\"250px\" \n                presetColors={ presetColors } \n                color={ this.state.color }\n                onChangeComplete={ this.setColor }\n              />\n         </div>\n         <div className=\"info\">\n            <ol>\n              <li>选择颜色</li>\n              <li>单击图片绘制圆形色块</li>\n              <li>双击色块擦除已有颜色</li> \n            </ol>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}